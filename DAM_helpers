#-------------------------------------------------------------------------------
# Name:     DAM_helpers
# Purpose:  This is the compliation of the organized helper methods that are
#           read in takeStockOfFiles.py
# Author:      pprzystupa
#
# Created:     26/02/2018
# Copyright:   (c) pprzystupa 2018
# Licence:     THIS IS IN PYTHON
#-------------------------------------------------------------------------------

#These are the libraries that you need to have installed for this to work
import os
import exifread
from os import listdir
from os.path import isfile, join

#Defined methods used in this program for appending information
#Get EXIF metadata from photos taken
def getExifMetadata (imageName, pathDirectory):
    image = open(pathDirectory+"//" + imageName, 'rb') #opens the image file to be read #actually not 100% sure why this works but it does even though I didn't pass it the path directory...
    tags = exifread.process_file(image) #process the image to get the exif tags
    for tag in tags.keys(): #for all the tags that were processed
        if tag in ('Image DateTime'): #I only want the image date/timetag
            date = str(tags[tag]) #cast that list item into a string
            year = date[0:4] #Get the year
            month = date [5:7] #get the month
            day = date[8:10] #get the day
            return [month, day, year] #return a comprehensive date

#Just returns the length of the type of document to be cut
def cutThatOut (type):
    return len(type)

#Writes out to a text file for the items that are in
def writeFile (fileName, tableBuilding, pathdirectory):
    #creates a new .txt for the table
    current_file = open (pathdirectory+ "\\" + fileName, "w")
    current_file.write("OrigName,InstitCode,year,month,day,docType")
    for i in range(0, len(tableBuilding)):
       current_file.write(tableBuilding[i])

def areYouMyType (fileName, docType):
    if ".tif" in fileName: #explores the document type which impacts where the date information comes from
        docType ="TIFF"
    elif ".TIF" in fileName:
        docType ="TIFF"
    elif ".JPG" in fileName: #primarily be photographs I have
        docType = "JPEG"
    elif ".jpg" in fileName: #primarily be photographs I have
        docType = "JPEG"
    else:
        docType = docType
    return docType

def theDataForThisOneLine (fileName,institutionCode, docType):
    docType = areYouMyType(fileName, docType)
    metadata = "XXXXX"
    if "TXT" not in docType: #aka it is one of the acceptable types
      if institutionCode not in fileName:
            lineInfo = whatToDoWithThisDoc(fileName, institutionCode)
            metadata = lineInfo[0]
            institutionCode = lineInfo[1]
      elif institutionCode in fileName:
            metadata = getNameData(fileName, institutionCode)  #call the same method but will have a unique institution code
    return [metadata, institutionCode, docType]

#alternative for getname data #I also noeed a (hey just like...fucking skip this line)  #Create a list of all the possible starting things #run it through a for loop
def getNameData (imageName):     #cutNumber= 0
    prefixList = ["UPA", "NPA", "DOIOOIA", "AIS", "ABQ", "AFIS", "SFIS", "MYSCAN_", "IMG_", "TAOS", "archives@state.nm.us_", "A2-3050-Sharp363N-1@nara.gov_", "1902_", "chaity_", "slide1_1908_", "slide1_1930_", "slide3_1908_", "slide4_1930_", "slide10_1902_", "slide11_1908_", "slide21_1930_", "56_AAASF_"]
    year = "9999" 	#year
    month = "13"	#month
    day = "32"	#day
    for i in range(0, len(prefixList)): #cycling through my list of prefixes
        if prefixList[i] in imageName: #Testing to see if that prefix is in the name of the document and if it is..
            cutNumber = cutThatOut(prefixList[i]) #maybe but in a thing where it's like "hey you don't have to keep looking
            month = imageName[cutNumber+4:cutNumber+6]
            day = imageName[cutNumber+6:cutNumber+8]
            year = imageName[cutNumber:cutNumber+4]
            print imageName
    return [month, day, year]
