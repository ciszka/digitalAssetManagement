#-------------------------------------------------------------------------------
# Name:        Digital Asset Management program
# Purpose: Fill a table based on what is in a folder I want this to fill a table
#          so I can know what the underlying images are that make up an
#          institutions model also want to write something that will append new
#          information but and not delete or added new ones so that as I add new
#          material (either to the same file or read from different files I can
#          apply this. This portion is currently set up to write to a .csv* but
#          this will eventually be imported into Access (most likely just for
#          convience of interface use) therefore it would be good to write some
#          sequel for this as well which will go into another file
# Author:      pprzystupa
#
# Created:     13 May 2019
# Copyright:   (c) pprzystupa 2019
# Licence:     <your licence>
#-------------------------------------------------------------------------------

#These are the libraries that you need to have installed for this to work
import os #this comes with your computer
import exifread #This will need to be downloaded from the developer who created this format for reading metadata from photos

#Names, Extensions and the places where you might want to look to find your or to take stock of your files
pathdirectory = "E:\\Anthro Backup"
extension = ".txt" #Extension for the document that will hold the list of files
givenFileName =  "AnthroBackup" #Place to put your file name for the list of files
newFileName = givenFileName + extension #combines what you want to call the file with the extension of hte file type that you want associated with it
fileNameHeadings = "Location,OrigName,docType"
photosFileName = "photos" + givenFileName + extension #This is an optional fileName specifically calling out and making a unique list of just the photos found in your directory
photoFileNameHeadings = "Location,OrigName,year,month,day,cameraModel"

# beginning variables that will be filled with information from the pathways
tableGrowing = [] #a table of all files
photoTableGrowing = [] #A table of just photos that have the dates as an additional field in the table
numberOfFiles = 0 #counter to count the number of files

#Defined methods used in this program for appending information
#Writes out to a text file for the items that are in
def writeFile (fileName, tableBuilding, pathdirectory, headings): #needs a name for the new file, an array with the information to build the table, and the location of where you want that file to go
    #creates a new .txt for the table
    current_file = open (pathdirectory+ "\\" + fileName, "w") #creates a new file at the specified location with the name and of the type you specicifed
    current_file.write(headings) #gives the document a header with these, these are optional but important for my work
    for i in range(0, len(tableBuilding)): #Actually reads through all the lines and writes the information to the text file
       current_file.write(tableBuilding[i])

#checks if a particular file is a jpeg or not
#may remove this as I oculd just do a contains fucntion but that might be annoying as well?
def areYouAJpeg (fileName):
    jpeg = False #Assumes that the item is not a jPeg
    if ".JPG" in fileName: #Do you have the correct extension?
        jpeg = True
    elif ".jpg" in fileName: #Or do you have a different extension
        jpeg = True
    else:
        jpeg = False
    return jpeg #Tell me if it's a jpeg

#Consider other metadata that could be gotten and if that is useful
#Possibly the Maker of the camera (0x927c is the numerical tag in exifread
#Get EXIF metadata from photos taken
def getExifMetadata (imageName):
    metadata = ""
    try:
        image = open(imageName, 'rb') #opens the image file to be read
        tags = exifread.process_file(image) #process the image to get the exif tags4
        for tag in tags.keys(): #for all the tags that were processed
            if tag in ('Image DateTime'): #I only want the image date/timetag
                date = str(tags[tag]) #cast that list item into a string
                year = date[0:4] #Get the year
                month = date [5:7] #get the month
                day = date[8:10] #get the day
                metadata = year + "," + month + "," + day
            if tag in ('Image Model'):
                cameraModel = str(tags[tag])
                metadata = metadata + "," + cameraModel
                return metadata
    except:
        return metadata

# gets just the filename (without the pathway) from the full filepath and name
def getJustFileName(fileName):
    #need to find the extension
    indexOfExtension = fileName.find(".") #gives the index of the extension
    #Gobackwards from the extension to the first /
    indexOfLastSlash = fileName.rfind("\\")
    justFileName = fileName[indexOfLastSlash+1:indexOfExtension] # need teh +1 so that it doesn't start with the \
    return justFileName

#need to find the extension
def whatsYourExtension(fileName):
    return fileName[fileName.find("."):len(fileName)]

#This is the walk through of the directories to take stock of the files that are
#within a particular directory
#currently it creates a list of them all and prints it onto a .txt file at the end
#Needs to notice which are .jpegs and add that information (aka metadata)
#to the growing list of stuff
for root, dirs, files in os.walk(pathdirectory):
    for file in files:
        numberOfFiles = numberOfFiles + 1
        fileName = os.path.join(root, file)
        fileNameWithoutPath = getJustFileName(fileName)
        if areYouAJpeg(fileName) :
            metadata = getExifMetadata(fileName)
            newPhotoLine = "\n" + fileName + "," + fileNameWithoutPath + "," + str(metadata)
            photoTableGrowing.append(newPhotoLine)
        extension = whatsYourExtension(fileName)
        newLine = "\n" + fileName + "," + fileNameWithoutPath + "," + extension[extension.find(".")+1:len(extension)]
        tableGrowing.append(newLine)
    print numberOfFiles

writeFile(newFileName, tableGrowing, pathdirectory, fileNameHeadings)
writeFile(photosFileName, photoTableGrowing, pathdirectory, photoFileNameHeadings)
